@page "/Detail/{Id}"

@using BlazorWebStock.Services
@using BlazorWebStockLibrary.Model

@inject NavigationManager navManager
@inject IProductServices productService
@inject IBasketService basketService

@if(product == null)
{
	<p>Loading...</p>
} else
{
<nav aria-label="breadcrumb mt-3 pt-3">
	  <ol class="breadcrumb">
		<li class="breadcrumb-item"><a href="/"><span class="oi oi-home"></span></a></li>
		<li class="breadcrumb-item active" aria-current="page">@product.ProductName</li>
	  </ol>
</nav>

<div class="row mt-2">
	<div class="col-md-6">
		  <img src="@product.ImgUrl" class="w-100" alt="">
	</div>
	<div class="col-md-6">
		<h4>@product.ProductName</h4>
		<p>@product.Description</p>
		<p>@product.Price $</p>
		<p>Stock : @product.Quantity</p>
		<button class="btn btn-dark" @onclick="() => AddToBasket(product)">Add to basket <span class="oi oi-cart"></span></button>
	</div>
</div>
}

@code {
	[Parameter]
	public string Id { get; set; }
	public Product product { get; set; }

	protected override async Task OnInitializedAsync()
	{
		product = await productService.GetProduct(Id);
	}

	private async Task AddToBasket(Product p)
	{
		try
		{
			BasketItem bi = new();
			BlazorWebStockLibrary.Model.Basket b = new();

			// TODO : Implement user management, hardcoded for now.
			b.Id = "62cfc3752760ffd7be5bde31";

			bi.Basket = b;
			bi.Product = p;
			bi.Quantity = p.Quantity;

			await basketService.AddItemToBasket(bi);
			navManager.NavigateTo("/basket");
		} 
		catch(Exception)
		{
			throw;
		}
	}
}
